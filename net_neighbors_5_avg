#!/usr/bin/perl -w
# -*- perl -*-

=head1 NAME

net_neighbors_5_avg - Plugin to monitor IPv6 neighbor numbers and state using a 5 minute average

=head1 CONFIGURATION

This plugin must run with root privileges

=head1 CONFIGURATION EXAMPLE

/etc/munin/plugin-conf.d/global or other file in that dir must contain:

 [fw*]
  user root

=head1 AUTHOR

Unknown snr1g11

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

if ( $ARGV[0] ) {

    if ( $ARGV[0] eq 'autoconf' ) {
	if ( -r '/proc/net/snmp') {
	    print "yes\n";
	    exit 0;
	}
	print "no\n";
	exit 0;

    } elsif ( $ARGV[0] eq 'config' ) {
	print <<EOM;
graph_title IPv6 neighbour 5 avg count
graph_args -l 0
graph_vlabel number of hosts
graph_category network
ip6_neigh_global.label IPv6 neighbours: Globally routable
ip6_neigh_global.draw LINE1
ip6_neigh_global.type GAUGE
ip6_neigh_global.min 0
ip6_neigh_local.label IPv6 neighbours: Link Local
ip6_neigh_local.draw LINE1
ip6_neigh_local.type GAUGE
ip6_neigh_local.min 0
ip6_neigh_state_reach.label IPv6 neighbours: state REACHABLE
ip6_neigh_state_reach.draw LINE1
ip6_neigh_state_reach.type GAUGE
ip6_neigh_state_reach.min 0
ip6_neigh_state_reach.info REACHABLE indicates that address resolutinos has completed successfully. Any queued packets are transmitted immediately
ip6_neigh_state_stale.label IPv6 neighbours: state STALE
ip6_neigh_state_stale.draw LINE1
ip6_neigh_state_stale.type GAUGE
ip6_neigh_state_stale.min 0
ip6_neigh_state_stale.info STALE indicates the neighbor is not known to be reachable
ip6_neigh_state_delay.label IPv6 neighbours: state DELAY
ip6_neigh_state_delay.draw LINE1
ip6_neigh_state_delay.type GAUGE
ip6_neigh_state_delay.min 0
ip6_neigh_state_delay.info DELAY indicates the neighbor is considered no longer know to be reachable
ip6_neigh_state_probe.label IPv6 neighbours: state PROBE
EOM
	exit 0;
    }
}

#$ip6_neigh = '/tmp/ip6_neigh';
@outputs = ("/tmp/ip6_neigh.index.1", "/tmp/ip6_neigh.index.2", "/tmp/ip6_neigh.index.3", "/tmp/ip6_neigh.index.4", "/tmp/ip6_neigh.index.5");

$ip6_neigh_global = 0;
$ip6_neigh_local = 0;
$ip6_neigh_state_reach = 0;
$ip6_neigh_state_stale = 0;
$ip6_neigh_state_delay = 0;
$ip6_neigh_state_probe = 0;

foreach(@outputs) {    
    $ip6_neigh_global += int(`cat $_ | grep 2001 | wc -l`);
    $ip6_neigh_local += (`cat $_ | grep fe80 | wc -l`);
    $ip6_neigh_state_reach += (`cat $_ | grep REACHABLE | wc -l`);
    $ip6_neigh_state_stale += (`cat $_ | grep STALE | wc -l`);
    $ip6_neigh_state_delay += (`cat $_ | grep DELAY | wc -l`);
    $ip6_neigh_state_probe += (`cat $_ | grep PROBE | wc -l`);
}

$ip6_neigh_global_avg = ($ip6_neigh_global / 5);
$ip6_neigh_local_avg = ($ip6_neigh_local / 5);
$ip6_neigh_state_reach_avg = ($ip6_neigh_state_reach / 5);
$ip6_neigh_state_stale_avg = ($ip6_neigh_state_stale / 5);
$ip6_neigh_state_delay_avg = ($ip6_neigh_state_delay / 5);
$ip6_neigh_state_probe_avg = ($ip6_neigh_state_probe / 5);


print "ip6_neigh_global.value $ip6_neigh_global_avg\n";
print "ip6_neigh_local.value $ip6_neigh_local_avg\n";
print "ip6_neigh_state_reach.value $ip6_neigh_state_reach_avg\n";
print "ip6_neigh_state_stale.value $ip6_neigh_state_stale_avg\n";
print "ip6_neigh_state_delay.value $ip6_neigh_state_delay_avg\n";
print "ip6_neigh_state_probe.value $ip6_neigh_state_probe_avg\n";

# vim:syntax=perl